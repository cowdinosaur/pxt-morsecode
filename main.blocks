<xml xmlns="https://developers.google.com/blockly/xml"><block type="pxt-on-start" id="kCDnp]}j-yg(W^TnUpE*" x="0" y="0"><statement name="HANDLER"><block type="typescript_statement" id="7tx,c;5?T7!0IH|G7]g)" editable="false"><mutation xmlns="http://www.w3.org/1999/xhtml" line0="enum MorseCharacter {" line1="    //% block=&quot;A&quot;" line2="    A," line3="    //% block=&quot;B&quot;" line4="    B," line5="    //% block=&quot;C&quot;" line6="    C," line7="    //% block=&quot;D&quot;" line8="    D," line9="    //% block=&quot;E&quot;" line10="    E," line11="    //% block=&quot;F&quot;" line12="    F," line13="    //% block=&quot;G&quot;" line14="    G," line15="    //% block=&quot;H&quot;" line16="    H," line17="    //% block=&quot;I&quot;" line18="    I," line19="    //% block=&quot;J&quot;" line20="    J," line21="    //% block=&quot;K&quot;" line22="    K," line23="    //% block=&quot;L&quot;" line24="    L," line25="    //% block=&quot;M&quot;" line26="    M," line27="    //% block=&quot;N&quot;" line28="    N," line29="    //% block=&quot;O&quot;" line30="    O," line31="    //% block=&quot;P&quot;" line32="    P," line33="    //% block=&quot;Q&quot;" line34="    Q," line35="    //% block=&quot;R&quot;" line36="    R," line37="    //% block=&quot;S&quot;" line38="    S," line39="    //% block=&quot;T&quot;" line40="    T," line41="    //% block=&quot;U&quot;" line42="    U," line43="    //% block=&quot;V&quot;" line44="    V," line45="    //% block=&quot;W&quot;" line46="    W," line47="    //% block=&quot;X&quot;" line48="    X," line49="    //% block=&quot;Y&quot;" line50="    Y," line51="    //% block=&quot;Z&quot;" line52="    Z" line53="}" numlines="54"></mutation><next><block type="typescript_statement" id="wv.PJDJzs9U/TKW7gMRX" editable="false"><mutation xmlns="http://www.w3.org/1999/xhtml" line0="enum MorseSignal {" line1="    //% block=&quot;•&quot;" line2="    Dot," line3="    //% block=&quot;━&quot;" line4="    Dash," line5="}" numlines="6"></mutation><next><block type="typescript_statement" id="Kc#`Ns,rnIX0cvLEf@I/" editable="false"><mutation xmlns="http://www.w3.org/1999/xhtml" line0="namespace morseCode {" line1="    const _characters = {" line2="        A: [MorseSignal.Dot, MorseSignal.Dash]," line3="        B: [MorseSignal.Dash, MorseSignal.Dot, MorseSignal.Dot, MorseSignal.Dot]," line4="        C: [MorseSignal.Dash, MorseSignal.Dot, MorseSignal.Dash, MorseSignal.Dot]," line5="        D: [MorseSignal.Dash, MorseSignal.Dot, MorseSignal.Dot]," line6="        E: [MorseSignal.Dot]," line7="        F: [MorseSignal.Dot, MorseSignal.Dot, MorseSignal.Dash, MorseSignal.Dot]," line8="        G: [MorseSignal.Dash, MorseSignal.Dash, MorseSignal.Dot]," line9="        H: [MorseSignal.Dot, MorseSignal.Dot, MorseSignal.Dot, MorseSignal.Dot]," line10="        I: [MorseSignal.Dot, MorseSignal.Dot]," line11="        J: [MorseSignal.Dot, MorseSignal.Dash, MorseSignal.Dash, MorseSignal.Dash]," line12="        K: [MorseSignal.Dash, MorseSignal.Dot, MorseSignal.Dash]," line13="        L: [MorseSignal.Dot, MorseSignal.Dash, MorseSignal.Dot, MorseSignal.Dot]," line14="        M: [MorseSignal.Dash, MorseSignal.Dash]," line15="        N: [MorseSignal.Dash, MorseSignal.Dot]," line16="        O: [MorseSignal.Dash, MorseSignal.Dash, MorseSignal.Dash]," line17="        P: [MorseSignal.Dot, MorseSignal.Dash, MorseSignal.Dash, MorseSignal.Dot]," line18="        Q: [MorseSignal.Dash, MorseSignal.Dash, MorseSignal.Dot, MorseSignal.Dash]," line19="        R: [MorseSignal.Dot, MorseSignal.Dash, MorseSignal.Dot]," line20="        S: [MorseSignal.Dot, MorseSignal.Dot, MorseSignal.Dot]," line21="        T: [MorseSignal.Dash]," line22="        U: [MorseSignal.Dot, MorseSignal.Dot, MorseSignal.Dash]," line23="        V: [MorseSignal.Dot, MorseSignal.Dot, MorseSignal.Dot, MorseSignal.Dash]," line24="        W: [MorseSignal.Dot, MorseSignal.Dash, MorseSignal.Dash]," line25="        X: [MorseSignal.Dash, MorseSignal.Dot, MorseSignal.Dot, MorseSignal.Dash]," line26="        Y: [MorseSignal.Dash, MorseSignal.Dot, MorseSignal.Dash, MorseSignal.Dash]," line27="        Z: [MorseSignal.Dash, MorseSignal.Dash, MorseSignal.Dot, MorseSignal.Dot]," line28="    };" line29="" line30="    /**" line31="     * Check if signal is a dash or a dot" line32="     */" line33="    //% color=190 block=&quot;%s | is %compareto | ?&quot;" line34="    //% group=&quot;Morse signal&quot;" line35="    export function isDashOrDot(s: Number, compareto: MorseSignal ) : boolean {" line36="        if (s == compareto) {" line37="            return true" line38="        } else {" line39="            return false" line40="        }" line41="    }" line42="    /**" line43="     * Get a Morse character" line44="     */" line45="    //% blockId=&quot;MorseCharacterGetBlock&quot; color=190 block=&quot;Morse %mchar&quot;" line46="    //% group=&quot;Morse character&quot;" line47="    export function _get(mchar: MorseCharacter): MorseSignal[] {" line48="        switch (mchar) {" line49="            case MorseCharacter.A:" line50="                return _characters.A;" line51="            case MorseCharacter.B:" line52="                return _characters.B;" line53="            case MorseCharacter.C:" line54="                return _characters.C;" line55="            case MorseCharacter.D:" line56="                return _characters.D;" line57="            case MorseCharacter.E:" line58="                return _characters.E;" line59="            case MorseCharacter.F:" line60="                return _characters.F;" line61="            case MorseCharacter.G:" line62="                return _characters.G;" line63="            case MorseCharacter.H:" line64="                return _characters.H;" line65="            case MorseCharacter.I:" line66="                return _characters.I;" line67="            case MorseCharacter.J:" line68="                return _characters.J;" line69="            case MorseCharacter.K:" line70="                return _characters.K;" line71="            case MorseCharacter.L:" line72="                return _characters.L;" line73="            case MorseCharacter.M:" line74="                return _characters.M;" line75="            case MorseCharacter.N:" line76="                return _characters.N;" line77="            case MorseCharacter.O:" line78="                return _characters.O;" line79="            case MorseCharacter.P:" line80="                return _characters.P;" line81="            case MorseCharacter.Q:" line82="                return _characters.Q;" line83="            case MorseCharacter.R:" line84="                return _characters.R;" line85="            case MorseCharacter.S:" line86="                return _characters.S;" line87="            case MorseCharacter.T:" line88="                return _characters.T;" line89="            case MorseCharacter.U:" line90="                return _characters.U;" line91="            case MorseCharacter.V:" line92="                return _characters.V;" line93="            case MorseCharacter.W:" line94="                return _characters.W;" line95="            case MorseCharacter.X:" line96="                return _characters.X;" line97="            case MorseCharacter.Y:" line98="                return _characters.Y;" line99="            case MorseCharacter.Z:" line100="                return _characters.Z;" line101="        }" line102="        return null;" line103="    }" line104="" line105="    /**" line106="     * Represents a Morse signal block" line107="     */" line108="    //% color=190 block=&quot;%signal&quot;" line109="    //% group=&quot;Morse signal&quot;" line110="    export function _signal(signal: MorseSignal): MorseSignal {" line111="        return signal;" line112="    }" line113="" line114="    /**" line115="     * Create a Morse word from an array of Morse Characters" line116="     */" line117="    //% color=190 block=&quot;Morse word from %mchars&quot;" line118="    //% mchars.shadow=&quot;lists_create_with&quot;" line119="    //% mchars.defl=&quot;MorseCharacterGetBlock&quot;" line120="    //% blockSetVariable=&quot;Morse char list&quot;" line121="    export function createWordFromArrayOfChars(mchars: MorseSignal[][]): MorseSignal[][] {" line122="        let word: MorseSignal[][] = mchars" line123="        return word;" line124="    }" line125="" line126="    /**" line127="     * Convert a string to an array of Morse Characters" line128="     */" line129="    //% color=190 block=&quot;convert %s to list of Morse characters&quot;" line130="    //% blockSetVariable=&quot;Morse char list&quot;" line131="    export function stringToMorseArray(s: string): MorseSignal[][] {" line132="        let word2: MorseSignal[][] = [];" line133="" line134="        const chars = s.split('');" line135="        chars.forEach(function (c, i) {" line136="            switch (c) {" line137="                case 'A':" line138="                case 'a':" line139="                    word2.push(_characters.A);" line140="                    break;" line141="                case 'B':" line142="                case 'b':" line143="                    word2.push(_characters.B);" line144="                    break;" line145="                case 'C':" line146="                case 'c':" line147="                    word2.push(_characters.C);" line148="                    break;" line149="                case 'D':" line150="                case 'd':" line151="                    word2.push(_characters.D);" line152="                    break;" line153="                case 'E':" line154="                case 'e':" line155="                    word2.push(_characters.E);" line156="                    break;" line157="                case 'F':" line158="                case 'f':" line159="                    word2.push(_characters.F);" line160="                    break;" line161="                case 'G':" line162="                case 'g':" line163="                    word2.push(_characters.G);" line164="                    break;" line165="                case 'H':" line166="                case 'h':" line167="                    word2.push(_characters.H);" line168="                    break;" line169="                case 'I':" line170="                case 'i':" line171="                    word2.push(_characters.I);" line172="                    break;" line173="                case 'J':" line174="                case 'j':" line175="                    word2.push(_characters.J);" line176="                    break;" line177="                case 'K':" line178="                case 'k':" line179="                    word2.push(_characters.K);" line180="                    break;" line181="                case 'L':" line182="                case 'l':" line183="                    word2.push(_characters.L);" line184="                    break;" line185="                case 'M':" line186="                case 'm':" line187="                    word2.push(_characters.M);" line188="                    break;" line189="                case 'N':" line190="                case 'n':" line191="                    word2.push(_characters.N);" line192="                    break;" line193="                case 'O':" line194="                case 'o':" line195="                    word2.push(_characters.O);" line196="                    break;" line197="                case 'P':" line198="                case 'p':" line199="                    word2.push(_characters.P);" line200="                    break;" line201="                case 'Q':" line202="                case 'q':" line203="                    word2.push(_characters.Q);" line204="                    break;" line205="                case 'R':" line206="                case 'r':" line207="                    word2.push(_characters.R);" line208="                    break;" line209="                case 'S':" line210="                case 's':" line211="                    word2.push(_characters.S);" line212="                    break;" line213="                case 'T':" line214="                case 't':" line215="                    word2.push(_characters.T);" line216="                    break;" line217="                case 'U':" line218="                case 'u':" line219="                    word2.push(_characters.U);" line220="                    break;" line221="                case 'V':" line222="                case 'v':" line223="                    word2.push(_characters.V);" line224="                    break;" line225="                case 'W':" line226="                case 'w':" line227="                    word2.push(_characters.W);" line228="                    break;" line229="                case 'X':" line230="                case 'x':" line231="                    word2.push(_characters.X);" line232="                    break;" line233="                case 'Y':" line234="                case 'y':" line235="                    word2.push(_characters.Y);" line236="                    break;" line237="                case 'Z':" line238="                case 'z':" line239="                    word2.push(_characters.Z);" line240="                    break;" line241="            }" line242="        });" line243="" line244="        return word2;" line245="    }" line246="" line247="    /**" line248="     * Convert a string to an array of Morse Characters" line249="     */" line250="    //% color=190 block=&quot;convert %s to list of Morse signals&quot;" line251="    //% s.shadow=&quot;MorseCharacterGetBlock&quot;" line252="    //% blockSetVariable=&quot;Morse signal list&quot;" line253="    export function MorseCharToMorseSignalArray(s: MorseSignal[]): MorseSignal[] {" line254="        return _characters.Z" line255="    }" line256="" line257="" line258="}" numlines="259"></mutation></block></next></block></next></block></statement></block></xml>