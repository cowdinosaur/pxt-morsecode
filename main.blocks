<xml xmlns="https://developers.google.com/blockly/xml"><block type="pxt-on-start" id="90%{xvWMdm~[,b3*O;~:" x="0" y="0"><statement name="HANDLER"><block type="typescript_statement" id="y?4Ds2/V%i])jWZ4al#I" editable="false"><mutation xmlns="http://www.w3.org/1999/xhtml" line0="namespace morseCode {" line1="    export enum MorseSignal {" line2="        //% block=&quot;•&quot;" line3="        Dot," line4="        //% block=&quot;━&quot;" line5="        Dash," line6="    }" line7="" line8="    const _characters = {" line9="        A: [MorseSignal.Dot, MorseSignal.Dash]," line10="        B: [MorseSignal.Dash, MorseSignal.Dot, MorseSignal.Dot, MorseSignal.Dot]," line11="        C: [MorseSignal.Dash, MorseSignal.Dot, MorseSignal.Dash, MorseSignal.Dot]," line12="        D: [MorseSignal.Dash, MorseSignal.Dot, MorseSignal.Dot]," line13="        E: [MorseSignal.Dot]," line14="        F: [MorseSignal.Dot, MorseSignal.Dot, MorseSignal.Dash, MorseSignal.Dot]," line15="        G: [MorseSignal.Dash, MorseSignal.Dash, MorseSignal.Dot]," line16="        H: [MorseSignal.Dot, MorseSignal.Dot, MorseSignal.Dot, MorseSignal.Dot]," line17="        I: [MorseSignal.Dot, MorseSignal.Dot]," line18="        J: [MorseSignal.Dot, MorseSignal.Dash, MorseSignal.Dash, MorseSignal.Dash]," line19="        K: [MorseSignal.Dash, MorseSignal.Dot, MorseSignal.Dash]," line20="        L: [MorseSignal.Dot, MorseSignal.Dash, MorseSignal.Dot, MorseSignal.Dot]," line21="        M: [MorseSignal.Dash, MorseSignal.Dash]," line22="        N: [MorseSignal.Dash, MorseSignal.Dot]," line23="        O: [MorseSignal.Dash, MorseSignal.Dash, MorseSignal.Dash]," line24="        P: [MorseSignal.Dot, MorseSignal.Dash, MorseSignal.Dash, MorseSignal.Dot]," line25="        Q: [MorseSignal.Dash, MorseSignal.Dash, MorseSignal.Dot, MorseSignal.Dash]," line26="        R: [MorseSignal.Dot, MorseSignal.Dash, MorseSignal.Dot]," line27="        S: [MorseSignal.Dot, MorseSignal.Dot, MorseSignal.Dot]," line28="        T: [MorseSignal.Dash]," line29="        U: [MorseSignal.Dot, MorseSignal.Dot, MorseSignal.Dash]," line30="        V: [MorseSignal.Dot, MorseSignal.Dot, MorseSignal.Dot, MorseSignal.Dash]," line31="        W: [MorseSignal.Dot, MorseSignal.Dash, MorseSignal.Dash]," line32="        X: [MorseSignal.Dash, MorseSignal.Dot, MorseSignal.Dot, MorseSignal.Dash]," line33="        Y: [MorseSignal.Dash, MorseSignal.Dot, MorseSignal.Dash, MorseSignal.Dash]," line34="        Z: [MorseSignal.Dash, MorseSignal.Dash, MorseSignal.Dot, MorseSignal.Dot]," line35="    };" line36="" line37="    //% fixedInstance" line38="    export let A: MorseSignal[] = _characters.A;" line39="    //% fixedInstance" line40="    export let B: MorseSignal[] = _characters.B;" line41="    //% fixedInstance" line42="    export let C: MorseSignal[] = _characters.C;" line43="    //% fixedInstance" line44="    export let D: MorseSignal[] = _characters.D;" line45="    //% fixedInstance" line46="    export let E: MorseSignal[] = _characters.E;" line47="    //% fixedInstance" line48="    export let F: MorseSignal[] = _characters.F;" line49="    //% fixedInstance" line50="    export let G: MorseSignal[] = _characters.G;" line51="    //% fixedInstance" line52="    export let H: MorseSignal[] = _characters.H;" line53="    //% fixedInstance" line54="    export let I: MorseSignal[] = _characters.I;" line55="    //% fixedInstance" line56="    export let J: MorseSignal[] = _characters.J;" line57="    //% fixedInstance" line58="    export let K: MorseSignal[] = _characters.K;" line59="    //% fixedInstance" line60="    export let L: MorseSignal[] = _characters.L;" line61="    //% fixedInstance" line62="    export let M: MorseSignal[] = _characters.M;" line63="" line64="    /**" line65="     * Represents a Morse signal block" line66="     */" line67="    //% color=190 block=&quot;%signal&quot;" line68="    export function _signal(signal: MorseSignal): MorseSignal {" line69="        return signal;" line70="    }" line71="" line72="    /**" line73="     * Convert a string to " line74="     */" line75="    //% color=190 block=&quot;convert %s to Morse chars&quot;" line76="    //% blockSetVariable=&quot;Morse char list&quot;" line77="    export function stringToMorseArray(s: string): MorseSignal[][] {" line78="        let word: MorseSignal[][] = [];" line79="        " line80="         const chars = s.split('');" line81="         chars.forEach(function(c,i) {" line82="             switch(c) {" line83="                 case 'A':" line84="                 case 'a':" line85="                     word.push(A);" line86="                     break;" line87="                 case 'B':" line88="                 case 'b': " line89="                     word.push(B);" line90="                     break;" line91="             }" line92="           });" line93="           " line94="        return word;" line95="    }" line96="}" numlines="97"></mutation></block></statement></block></xml>